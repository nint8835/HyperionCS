/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';

import { InternalContext, queryKeyFn, useInternalContext } from './internalContext';
import type * as Fetcher from './internalFetcher';
import { internalFetch } from './internalFetcher';
import type * as Schemas from './internalSchemas';
import { deepMerge } from './internalUtils';

type QueryFnOptions = {
  signal?: AbortController['signal'];
};

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = InternalContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
  internalFetch<Schemas.SessionUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
    url: '/auth/me',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieve the details of the current user.
 */
export function getCurrentUserQuery(variables: GetCurrentUserVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<Schemas.SessionUser | null>;
};

export function getCurrentUserQuery(variables: GetCurrentUserVariables | reactQuery.SkipToken): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<Schemas.SessionUser | null>) | reactQuery.SkipToken;
};

export function getCurrentUserQuery(variables: GetCurrentUserVariables | reactQuery.SkipToken) {
  return {
    queryKey: queryKeyFn({
      path: '/auth/me',
      operationId: 'getCurrentUser',
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) => fetchGetCurrentUser(variables, signal),
  };
}

/**
 * Retrieve the details of the current user.
 */
export const useSuspenseGetCurrentUser = <TData = Schemas.SessionUser | null>(
  variables: GetCurrentUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SessionUser | null, GetCurrentUserError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { queryOptions, fetcherOptions } = useInternalContext(options);
  return reactQuery.useSuspenseQuery<Schemas.SessionUser | null, GetCurrentUserError, TData>({
    ...getCurrentUserQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * Retrieve the details of the current user.
 */
export const useGetCurrentUser = <TData = Schemas.SessionUser | null>(
  variables: GetCurrentUserVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SessionUser | null, GetCurrentUserError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { queryOptions, fetcherOptions } = useInternalContext(options);
  return reactQuery.useQuery<Schemas.SessionUser | null, GetCurrentUserError, TData>({
    ...getCurrentUserQuery(variables === reactQuery.skipToken ? variables : deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export type CreateCurrencyError = Fetcher.ErrorWrapper<
  | {
      status: 409;
      payload: Schemas.ErrorResponseSchema;
    }
  | {
      status: 422;
      payload: Schemas.HTTPValidationError;
    }
>;

export type CreateCurrencyVariables = {
  body: Schemas.CreateCurrencySchema;
} & InternalContext['fetcherOptions'];

/**
 * Create a new currency.
 */
export const fetchCreateCurrency = (variables: CreateCurrencyVariables, signal?: AbortSignal) =>
  internalFetch<Schemas.CurrencySchema, CreateCurrencyError, Schemas.CreateCurrencySchema, {}, {}, {}>({
    url: '/api/internal/currencies/',
    method: 'post',
    ...variables,
    signal,
  });

/**
 * Create a new currency.
 */
export const useCreateCurrency = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.CurrencySchema, CreateCurrencyError, CreateCurrencyVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useInternalContext();
  return reactQuery.useMutation<Schemas.CurrencySchema, CreateCurrencyError, CreateCurrencyVariables>({
    mutationFn: (variables: CreateCurrencyVariables) => fetchCreateCurrency(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type QueryOperation = {
  path: '/auth/me';
  operationId: 'getCurrentUser';
  variables: GetCurrentUserVariables | reactQuery.SkipToken;
};
