/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useIntegrationsV1Context,
  IntegrationsV1Context,
  queryKeyFn,
} from "./integrationsV1Context";
import { deepMerge } from "./integrationsV1Utils";
import type * as Fetcher from "./integrationsV1Fetcher";
import { integrationsV1Fetch } from "./integrationsV1Fetcher";
import type * as Schemas from "./integrationsV1Schemas";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type ListCurrenciesError = Fetcher.ErrorWrapper<undefined>;

export type ListCurrenciesResponse = Schemas.CurrencySchema[];

export type ListCurrenciesVariables = IntegrationsV1Context["fetcherOptions"];

/**
 * List all currencies.
 */
export const fetchListCurrencies = (
  variables: ListCurrenciesVariables,
  signal?: AbortSignal,
) =>
  integrationsV1Fetch<
    ListCurrenciesResponse,
    ListCurrenciesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/currencies/", method: "get", ...variables, signal });

/**
 * List all currencies.
 */
export function listCurrenciesQuery(variables: ListCurrenciesVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<ListCurrenciesResponse>;
};

export function listCurrenciesQuery(
  variables: ListCurrenciesVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<ListCurrenciesResponse>)
    | reactQuery.SkipToken;
};

export function listCurrenciesQuery(
  variables: ListCurrenciesVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/currencies/",
      operationId: "listCurrencies",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchListCurrencies(variables, signal),
  };
}

/**
 * List all currencies.
 */
export const useSuspenseListCurrencies = <TData = ListCurrenciesResponse,>(
  variables: ListCurrenciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListCurrenciesResponse,
      ListCurrenciesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useIntegrationsV1Context(options);
  return reactQuery.useSuspenseQuery<
    ListCurrenciesResponse,
    ListCurrenciesError,
    TData
  >({
    ...listCurrenciesQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all currencies.
 */
export const useListCurrencies = <TData = ListCurrenciesResponse,>(
  variables: ListCurrenciesVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListCurrenciesResponse,
      ListCurrenciesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useIntegrationsV1Context(options);
  return reactQuery.useQuery<
    ListCurrenciesResponse,
    ListCurrenciesError,
    TData
  >({
    ...listCurrenciesQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/currencies/";
  operationId: "listCurrencies";
  variables: ListCurrenciesVariables | reactQuery.SkipToken;
};
